@model BookProject.Models.UserProfileViewModel

@{
    ViewBag.Title = "פרופיל משתמש";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    <div class="row">
        <!-- פרטי המשתמש -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>User information</h3>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("UpdateProfile", "Profile", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(m => m.UserId)

                        <div class="form-group">
                            @Html.LabelFor(m => m.Username)
                            @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mt-3">
                            @Html.LabelFor(m => m.Email)
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>
                        
                        <!-- שדות לשינוי סיסמה -->
                        <hr class="mt-4" />
                        <h4>Change Password</h4>

                        <div class="form-group mt-3">
                            @Html.LabelFor(m => m.CurrentPassword)
                            @Html.PasswordFor(m => m.CurrentPassword, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.CurrentPassword, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mt-3">
                            @Html.LabelFor(m => m.NewPassword)
                            @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mt-3">
                            @Html.LabelFor(m => m.ConfirmNewPassword)
                            @Html.PasswordFor(m => m.ConfirmNewPassword, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.ConfirmNewPassword, "", new { @class = "text-danger" })
                        </div>

                            <div class="form-group mt-3">
                                <label>Registration date</label>
                                <div class="form-control" readonly>
                                    @Model.CreatedAt
                                </div>
                            </div>

                        <button type="submit" class="btn btn-primary mt-3">Save changes</button>
                    }
                </div>
            </div>
        </div>

        <!-- רשימת ספרים -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>My books</h3>
                </div>
                <div class="card-body">
                    <h4>Books purchased</h4>
                    @if (Model.Purchases != null && Model.Purchases.Any())
                    {
                        <ul class="list-group">
                            @foreach (var purchase in Model.Purchases)
                            {
                                <li class="list-group-item">
                                    <h5>@purchase.Book.Title</h5>
                                    <p class="mb-0">Purchase date: @purchase.PurchaseDate?.ToShortDateString()</p>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No books purchased</p>
                    }

                    <h4 class="mt-4">Borrowed books</h4>
                    @if (Model.Borrows != null && Model.Borrows.Any())
                    {
                        <ul class="list-group">
                            @foreach (var borrow in Model.Borrows)
                            {
                                <li class="list-group-item">
                                    <h5>@borrow.Book.Title</h5>
                                    <p>Return date: @borrow.ReturnDate.ToShortDateString()</p>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No books borrowed</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // הודעת הצלחה נעלמת אחרי 3 שניות
        $(document).ready(function () {
            setTimeout(function () {
                $(".alert").fadeOut('slow');
            }, 3000);
        });
    </script>
}